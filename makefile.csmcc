#**********************************************************#
#file     makefile
#author   Rajmund Szymanski
#date     27.02.2021
#brief    LM4F120H5QR makefile.
#**********************************************************#

CSMCC      :=
GNUCC      :=
OPENOCD    := openocd
LMFLASH    := lmflash -q ek-lm4f232 -v -r
QEMU       := qemu-system-gnuarmeclipse -semihosting -board EK-LM4F120XL

#----------------------------------------------------------#

PROJECT    ?= $(notdir $(CURDIR))
DEFS       ?=
DIRS       ?=
INCS       ?= .
LIBS       ?=
KEYS       ?=
OPTF       ?=
SCRIPT     ?=

#----------------------------------------------------------#

DEFS       += TARGET_IS_BLIZZARD_RA2 PART_LM4F120H5QR __ARM__
KEYS       += .csmcc .cortexm .lm4f *
ifneq ($(MAKECMDGOALS),qemu)
LIBS       += crtsi libfpulc libilc libm
else
LIBS       += crtsi libflc   libilc libm
endif
MODEL      := modlc

#----------------------------------------------------------#

AS         := $(CSMCC)cxcorm
CC         := $(CSMCC)cxcorm
DWARF      := $(CSMCC)cvdwarf
COPY       := $(GNUCC)arm-none-eabi-objcopy
DUMP       := $(CSMCC)chex
LABS       := $(CSMCC)clabs
SIZE       := $(GNUCC)arm-none-eabi-size
LD         := $(CSMCC)clnk
AR         := $(CSMCC)clib
GDB        := $(GNUCC)arm-none-eabi-gdb

RM         ?= rm -f

#----------------------------------------------------------#

DTREE       = $(foreach d,$(foreach k,$(KEYS),$(wildcard $1$k)),$(dir $d) $(call DTREE,$d/))

VPATH      := $(sort $(call DTREE,) $(foreach d,$(DIRS),$(call DTREE,$d/)))

#----------------------------------------------------------#

AS_EXT     := .s
C_EXT      := .c

INC_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $d*.h))))
LIB_DIRS   := $(sort $(dir $(foreach d,$(VPATH),$(wildcard $d*.cxm))))
OBJ_SRCS   :=              $(foreach d,$(VPATH),$(wildcard $d*.o))
AS_SRCS    :=              $(foreach d,$(VPATH),$(wildcard $d*$(AS_EXT)))
C_SRCS     :=              $(foreach d,$(VPATH),$(wildcard $d*$(C_EXT)))
LIB_SRCS   :=     $(notdir $(foreach d,$(VPATH),$(wildcard $d*.cxm)))
ifeq ($(strip $(SCRIPT)),)
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d*.lkf)))
else
SCRIPT     :=  $(firstword $(foreach d,$(VPATH),$(wildcard $d$(SCRIPT))))
endif
ifeq ($(strip $(PROJECT)),)
PROJECT    :=     $(notdir $(CURDIR))
endif

AS_SRCS    := $(AS_SRCS:%.S=)

#----------------------------------------------------------#

BIN        := $(PROJECT).bin
CXM        := $(PROJECT).cxm
ELF        := $(PROJECT).elf
HEX        := $(PROJECT).s19
LIB        := $(PROJECT).cxm
MAP        := $(PROJECT).map

OBJS       := $(AS_SRCS:%$(AS_EXT)=%.o)
OBJS       += $(C_SRCS:%$(C_EXT)=%.o)
DEPS       := $(OBJS:.o=.d)
LSTS       := $(OBJS:.o=.ls)
TXTS       := $(OBJS:.o=.la)

#----------------------------------------------------------#

AS_FLAGS   := #-ax
AS_FLAGS   += -l -ep
C_FLAGS    := #+debug
C_FLAGS    += #+strict +warn
C_FLAGS    += +$(MODEL) -pc99 -l -pad
ifneq ($(MAKECMDGOALS),qemu)
C_FLAGS    += +fpu
endif
LD_FLAGS   := -m $(MAP) -p

#----------------------------------------------------------#

DEFS_F     := $(DEFS:%=-d%)

LIB_DIRS_F := $(LIB_DIRS:%=-l%)
LIBS_F     := $(LIBS:%=%.cxm)
LIBS_F     += $(LIB_SRCS:$(CXM)=)
OBJS_ALL   := $(sort $(OBJ_SRCS) $(OBJS))
INC_DIRS   += $(INCS:%=%/)
INC_DIRS_F := $(INC_DIRS:%=-i%)

AS_FLAGS   += $(DEFS_F)
C_FLAGS    += $(DEFS_F) $(INC_DIRS_F)
LD_FLAGS   += $(LIB_DIRS_F)

#----------------------------------------------------------#

#openocd command-line
#interface and board/target settings (using the OOCD target-library here)
OOCD_INIT  := -f board/ek-lm4f120xl.cfg
OOCD_INIT  += -c init
OOCD_INIT  += -c targets
#commands to enable semihosting
OOCD_DEBG  := -c "arm semihosting enable"
#commands to prepare flash-write
OOCD_SAVE  := -c "reset halt"
#flash-write and -verify
OOCD_SAVE  += -c "flash write_image erase $(ELF)"
OOCD_SAVE  += -c "verify_image $(ELF)"
#reset target
OOCD_EXEC  := -c "reset run"
#terminate OOCD after programming
OOCD_EXIT  := -c shutdown

#gdb command line
DEBUG_CMD  := -ex "target remote localhost:3333"
DEBUG_CMD  += -ex "mon reset halt"
DEBUG_CMD  += -ex "tbreak main"
DEBUG_CMD  += -ex "c"

#----------------------------------------------------------#

all : $(ELF) print_elf_size

lib : $(OBJS_ALL)
	$(info Creating library: $(LIB))
	$(AR) -c -p $(LIB) $?

$(CXM) : $(OBJS_ALL) $(SCRIPT)
	$(info Creating CXM image: $(CXM))
ifeq ($(strip $(SCRIPT)),)
	$(error No linker file in project)
endif
	$(LD) -o $@ $(LD_FLAGS) $(SCRIPT) $(OBJS_ALL) $(LIBS_F)

$(OBJS) : $(MAKEFILE_LIST)

%.o : %$(AS_EXT)
	$(AS) $(AS_FLAGS) $<

%.o : %$(C_EXT)
	$(CC) $(C_FLAGS) $<

%.d : %$(C_EXT)
#	$(CC) $(C_FLAGS) -sm $< > $@

$(ELF) : $(CXM)
	$(info Creating ELF image: $(ELF))
	$(DWARF) $<
#	$(info Creating absolute listings)
#	$(LABS) $<

$(BIN) : $(ELF)
	$(info Creating BIN image: $(BIN))
	$(COPY) -O binary $< $@

$(HEX) : $(CXM)
	$(info Creating HEX image: $(HEX))
	$(DUMP) -o $@ $<

print_elf_size :
	$(info Size of target file:)
	$(SIZE) -B $(ELF)

GENERATED = $(BIN) $(CXM) $(ELF) $(HEX) $(LIB) $(MAP) $(DEPS) $(LSTS) $(OBJS) $(TXTS)

clean :
	$(info Removing all generated output files)
	$(RM) $(BIN) $(CXM) $(ELF) $(HEX) $(LIB) $(MAP)
	$(RM) $(DEPS)
	$(RM) $(LSTS)
	$(RM) $(OBJS)
	$(RM) $(TXTS)

flash : all $(BIN)
	$(info Programing device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_EXEC) $(OOCD_EXIT)
#	$(LMFLASH) $(BIN)

server : all
	$(info Starting server...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE)

debug : all
	$(info Debugging device...)
	$(GDB) --nx $(DEBUG_CMD) $(ELF)

monitor : all
	$(info Monitoring device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_SAVE) $(OOCD_DEBG) $(OOCD_EXEC)

qemu : all
	$(info Emulating device...)
	$(QEMU) -image $(ELF)

reset :
	$(info Reseting device...)
	$(OPENOCD) $(OOCD_INIT) $(OOCD_EXEC) $(OOCD_EXIT)
#	$(LMFLASH) --hreset

.PHONY : all lib clean flash server debug monitor qemu reset

-include $(DEPS)
